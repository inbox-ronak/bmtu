<?php defined('BASEPATH') OR exit('No direct script access allowed');class Email_templates extends CI_Controller {    /**     * Construct function     */    public function __construct() {        parent::__construct();        $this->load->helper('download');        $this->lang_helper = langArr();    }    public function index() {        $data['title'] = 'Email Templates | List Of Templates';        $data['main_page'] = 'backend/email_templates/list';        $this->load->view('layout/template',$data);    }    public function add_template() {        if ($_SERVER['REQUEST_METHOD'] == 'POST') {            foreach ($this->lang_helper as $key => $val) {                $required = '';                //if ($key == 'en') {                    $required = '|required';               // }                $this->form_validation->set_rules('email_template_subject_' . $key, 'Email Subject [' . $val . ']', 'trim' . $required);                $this->form_validation->set_rules('email_template_body_' . $key, 'Email Body [' . $val . ']', 'trim' . $required);            }            $this->form_validation->set_rules('email_template_for', 'Email For', 'trim|required');            if ($this->form_validation->run() == FALSE) {                $this->common_model->flash_alert_message('warning', '<i class="fa fa-warning"></i> Form Error!', validation_errors());            } else {                $slug_value = $this->input->post('identifier');                $unique_slug = $this->common_model->get_unique_slug('ci_email_template', 'email_template_slug', $slug_value);                $langArr = langArr();                $emailTitleArr = array();                $emailDescArr = array();                foreach ($langArr as $key => $val) {                    $speci_compo[$key] = $this->input->post('email_template_subject_' . $key);                    $speci_detail[$key] = base64_encode($this->input->post('email_template_body_' . $key));                    $emailTitleArr['email_template_subject'] = $speci_compo;                    $emailDescArr['email_template_body'] = $speci_detail;                }                $emailSub = serialize($emailTitleArr);                $emailDetail = serialize($emailDescArr);                /* new updated code for stor data language wise end here 17/06/2019 */                $data = array(                    'email_template_for' => $this->input->post('email_template_for'),                    'status' => $this->input->post('status'),                    'email_template_subject' => $emailSub,                    'email_template_body' => $emailDetail,                    'email_template_slug' => $unique_slug,                );                $this->db->set('email_template_created_at', 'NOW()', FALSE);                $this->db->set('email_template_modified_at', 'NOW()', FALSE);                $ins = $this->common_model->insert_data('ci_email_template', $data);                $last_id = $this->db->insert_id();                if ($ins == TRUE) {                    $this->session->set_flashdata('msg', 'Email Template added successfully!');                    if($this->input->post('submit')=="Apply"){                        //redirect(base_url('backend/email_templates/edit_template/'.$last_id));                        redirect(base_url('admin/email_templates'));                    }else{                        redirect(base_url('admin/email_templates'));                    }                }            }        }        $data['title'] = 'Email Templates | Add New Templates';        $data['main_page'] = 'backend/email_templates/add_form';        $this->load->view('layout/template',$data);    }    public function datatable_json() {         $table_name = 'ci_email_template';        $columns = '*';        $search_columns = 'email_template_id, email_template_for, email_template_subject';        $order_by = 'email_template_created_at desc';        $where = array();        $records = $this->common_model->json_datatable($table_name, $columns, $where, $order_by, $search_columns, $joins = array());        $data = array();        foreach ($records['data'] as $row) {            if (strlen($row['email_template_for']) <= 40) {                $email_template_for = strip_tags($row['email_template_for']);            } else {                $email_template_for = substr(strip_tags($row['email_template_for']), 0, 40) . '...';            }            $email = unserialize($row['email_template_subject']);            $emailDetail = unserialize($row['email_template_body']);            if (isset($email['email_template_subject']['en']) && strlen($email['email_template_subject']['en']) <= 40) {                $email_template_subject_en = strip_tags($email['email_template_subject']['en']);            } else {                $email_template_subject_en = substr(strip_tags($email['email_template_subject']['en']), 0, 40) . '...';            }            if (isset($emailDetail['email_template_body']['en']) && strlen(base64_decode($emailDetail['email_template_body']['en'])) <= 40) {                $email_template_body_en = strip_tags(base64_decode($emailDetail['email_template_body']['en']));            } else {                $email_template_body_en = substr(strip_tags(base64_decode($emailDetail['email_template_body']['en'])), 0, 40) . '...';            }            $data[] = array(                '<div class="icheck-primary d-inline"><input type="checkbox" class="chkbox" name="ids[]" value="' . $row['email_template_id'] . '" id="all_chkbox'.$row['email_template_id'].'"><label for="all_chkbox'.$row['email_template_id'].'"></label></div>',                '<span class="">' . $email_template_for . '<span>',                '<span class="">' . $email_template_subject_en . '<span>',                '<span class="">' . $email_template_body_en . '<span>',                '<span class="">' . date('d-m-Y H:i:s', strtotime($row['email_template_created_at'])) . '<span>',                '<a title="Edit" class="update btn btn-xs btn-primary" href="' . base_url('admin/email_templates/edit_template/' . $row['email_template_id']) . '"> <i class="fa fas fa-pencil-alt"></i></a>&nbsp;&nbsp;&nbsp;'            );        }        $records['data'] = $data;        echo json_encode($records);    }    public function edit_template($email_template_id = '') {        if ($_SERVER['REQUEST_METHOD'] == 'POST') {            foreach ($this->lang_helper as $key => $val) {                $required = '';                if ($key == 'en') {                    $required = '|required';                }                $this->form_validation->set_rules('email_template_subject_' . $key, 'Email Subject [' . $val . ']', 'trim' . $required);                $this->form_validation->set_rules('email_template_body_' . $key, 'Email Body [' . $val . ']', 'trim' . $required);            }            $this->form_validation->set_rules('email_template_for', 'Email For', 'trim|required');            $updt_id = $this->input->post('email_template_id');            if ($this->form_validation->run() == FALSE) {                $this->common_model->flash_alert_message('warning', '<i class="fa fa-warning"></i> Form Error!', validation_errors());                redirect(base_url('admin/email_templates/edit_template/' . $updt_id));            } else {                $langArr = langArr();                $emailTitleArr = array();                $emailDescArr = array();                foreach ($langArr as $key => $val) {                    $speci_compo[$key] = $this->input->post('email_template_subject_' . $key);                    $speci_detail[$key] = base64_encode($this->input->post('email_template_body_' . $key));                    $emailTitleArr['email_template_subject'] = $speci_compo;                    $emailDescArr['email_template_body'] = $speci_detail;                }                $emailSub = serialize($emailTitleArr);                $emailDetail = serialize($emailDescArr);                 $data = array(                    'email_template_for' => $this->input->post('email_template_for'),                    //'status' => $this->input->post('status'),                    'email_template_subject' => $emailSub,                    'email_template_body' => $emailDetail,                );                $this->db->set('email_template_modified_at', 'NOW()', FALSE);                $updt = $this->common_model->update_data('ci_email_template', $data, array('email_template_id ' => $updt_id));                if ( $updt) {                    $this->session->set_flashdata('msg', 'Email Template updated successfully!');                    if($this->input->post('submit')=="Apply"){                        redirect(base_url('admin/email_templates/edit_template/'.$updt_id));                    }else{                        redirect(base_url('admin/email_templates'));                    }                }            }        }        $emailTemp = $this->common_model->select_data_by_id('ci_email_template', '*', array('email_template_id' => $email_template_id), $other_condition = '', $order_by = 'email_template_id', $sort_type = 'DESC', $limit = 1, $offset = 0);        $langArr = langArr();        $emailSub = !empty($emailTemp['email_template_subject']) ? unserialize($emailTemp['email_template_subject']) : '';        $emailDesc = !empty($emailTemp['email_template_body']) ? unserialize($emailTemp['email_template_body']) : '';        foreach ($langArr as $key => $lVal) {            $emailTemp['email_template_subject_' . $key] = !empty($emailSub) ? $emailSub['email_template_subject'][$key] : '';            $emailTemp['email_template_body_' . $key] = !empty($emailDesc) ? $emailDesc['email_template_body'][$key] : '';        }        $data['posts'] = $emailTemp;        $data['title'] = 'Email Templates | Edit Template';        $data['main_page'] = 'backend/email_templates/edit_form';        $this->load->view('layout/template',$data);    }    public function multidel() {        $this->db->where_in('email_template_id', $this->input->post('records_to_del'));        $this->db->delete('ci_email_template');        $this->session->set_flashdata('msg', 'Email Template has been deleted successfully!');        exit();    }        public function del($id = 0) {        $this->db->delete('ci_email_template', array('email_template_id' => $id));        $this->session->set_flashdata('msg', 'Email Template has been deleted successfully!');        redirect(base_url('admin/email_templates'));    }    public function img_upload_via_editor(){        $id = $this->input->post('id');        if ($_FILES['file']['name']) {            if (!$_FILES['file']['error']) {                $name = md5(rand(100, 200));                $ext = explode('.', $_FILES['file']['name']);                $filename = $name . '.' . $ext[1];                $destination = './uploads/email/' . $filename; //change this directory                $location = $_FILES["file"]["tmp_name"];                move_uploaded_file($location, $destination);                echo $path = base_url().$destination;            }else{              echo  $message = 'Ooops!  Your upload triggered the following error:  '.$_FILES['file']['error'];            }        }    }}